package ${packageName}.service.impl;

#if($table.tree)
import java.util.ArrayList;
import java.util.Iterator;
#end
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 * 
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl implements I${ClassName}Service {

    @Autowired
    private ${ClassName}Mapper ${className}Mapper;

    /**
     * 查询${functionName}
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @Override
    public ${ClassName} select${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.select${ClassName}ById(${pkColumn.javaField});
    }

    /**
     * 查询${functionName}列表
     * 
     * @param ${className} ${functionName}
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}) {
        return ${className}Mapper.select${ClassName}List(${className});
    }

    /**
     * 新增${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int insert${ClassName}(${ClassName} ${className}) {
        return ${className}Mapper.insert${ClassName}(${className});
    }

    /**
     * 修改${functionName}
     * 
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Override
    public int update${ClassName}(${ClassName} ${className}) {
        return ${className}Mapper.update${ClassName}(${className});
    }

    /**
     * 批量删除${functionName}
     * 
     * @param ${pkColumn.javaField}s 需要删除的${functionName}ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ByIds(${pkColumn.javaType}[] ${pkColumn.javaField}s) {
        return ${className}Mapper.delete${ClassName}ByIds(${pkColumn.javaField}s);
    }

    /**
     * 删除${functionName}信息
     * 
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    @Override
    public int delete${ClassName}ById(${pkColumn.javaType} ${pkColumn.javaField}) {
        return ${className}Mapper.delete${ClassName}ById(${pkColumn.javaField});
    }
 
#if($table.tree)

	/* 
	 在 TreeSelect类中添加以下方法：
	 public TreeSelect(${ClassName} ${className}) {
	    this.id = menu.getMenuId();
	    this.label = menu.getMenuName();
	    this.children = menu.getChildren().stream().map(TreeSelect::new).collect(Collectors.toList());
	 }
	*/
    /**
	 * 构建前端所需要下拉树结构
	 * 
	 * @param menus 菜单列表
	 * @return 下拉树结构列表
	 */
	/*	
	@Override
	public List<TreeSelect> buildDataTreeSelect(List<${ClassName}> list) {
		List<${ClassName}> listTrees = buildDataTree(list);
		return listTrees.stream().map(TreeSelect::new).collect(Collectors.toList());
	}
	*/

     /**
     * 构建前端所需要树结构
     * 
     * @param ${functionName}列表
     * @return 树结构列表
     */
    public List<${ClassName}> buildDataTree(List<${ClassName}> list){
     List<${ClassName}> returnList = new ArrayList<${ClassName}>();
		for (Iterator<${ClassName}> iterator = list.iterator(); iterator.hasNext();) {
			${ClassName} t = (${ClassName}) iterator.next();
			// 根据传入的某个父节点ID,遍历该父节点的所有子节点
			if ("0".equals(t.get${TreeParentCode}())) {
				recursionFn(list, t);
				returnList.add(t);
			}
		}
		if (returnList.isEmpty()) {
			returnList = list;
		}
		return returnList;
    };
    
    /**
	 * 递归列表
	 * 
	 * @param list
	 * @param t
	 */
	private void recursionFn(List<${ClassName}> list, ${ClassName} t) {
		// 得到子节点列表
		List<${ClassName}> childList = getChildList(list, t);
		t.setChildren(childList);
		for (${ClassName} tChild : childList) {
			if (hasChild(list, tChild)) {
				// 判断是否有子节点
				Iterator<${ClassName}> it = childList.iterator();
				while (it.hasNext()) {
					${ClassName} n = (${ClassName}) it.next();
					recursionFn(list, n);
				}
			}
		}
	}
	
	/**
	 * 得到子节点列表
	 */
	private List<${ClassName}> getChildList(List<${ClassName}> list, ${ClassName} t) {
		List<${ClassName}> tlist = new ArrayList<${ClassName}>();
		Iterator<${ClassName}> it = list.iterator();
		while (it.hasNext()) {
			${ClassName} n = (${ClassName}) it.next();
			if (n.get${TreeParentCode}().equals(t. get${pkJavaField}())) { 
				tlist.add(n);
			}
		}
		return tlist;
	}
	
	/**
	 * 判断是否有子节点
	 */
	private boolean hasChild(List<${ClassName}> list, ${ClassName} t) {
		return getChildList(list, t).size() > 0 ? true : false;
	}
 #end
}
